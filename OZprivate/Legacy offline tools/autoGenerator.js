var autoGenerator = new Object();
var groupArray = new Array();
var rawData;
var metadata;


function onloadSelections(id) {
	var form = document.getElementById(id);
	for(var i = 0; i < selections.length; i++) {
	   var div = createSection(form, selections[i]);
	   var visible = selections[i].visible;
	   for(var j = 0; j < visible.length; j++) {
		   createComponent(div, visible[j], 0);
		   //0: create from selection
	   }
	   var additional = selections[i].additional;
	   for(var j = 0; j < additional.length; j++) {
		   createComponent(div, additional[j], 1);
	   }
	   createAdditionalChoice(div, selections[i].additional, selections[i].visible);
	}
	$('[id$=_minus_button]').parent().hide();
	createSubmitButton(form);
	createAutoGeneratedURL(form);
	loadData();
}

function loadData() {
	autoGenerator.name = $('#selected_group').find(':selected').attr('data');
	groupArray.push(autoGenerator.name);

	$('#selected_group').change(function(){
		var name = $('#selected_group').find(':selected').attr('data');
		if (name == autoGenerator.name) return;
		else {

                                if (name == "plants" && autoGenerator.name != "plants") {
                                var element = document.getElementById("useroption");
                                if (element)
                                {
                                element.parentNode.removeChild(element);
                                }
                                        var tempscript = document.createElement('script');
                                        tempscript.setAttribute("id", "useroption");
                               	        tempscript.src = "user/userOptions_plants.js";
                               	        document.head.appendChild(tempscript);
                                
                                } else if (name != "plants" && autoGenerator.name == "plants") {
                                var element = document.getElementById("useroption");
                                if (element)
                                {
                                element.parentNode.removeChild(element);
                                }
                                var tempscript = document.createElement('script');
                                tempscript.setAttribute("id", "useroption");
                                tempscript.src = "user/userOptions.js";
                                document.head.appendChild(tempscript);
                                }

                                file_name = name;
                                init();
                                autoGenerator.name = name;
		}
	});
}

function createAdditionalChoice(div, additional, visible) {
	var select = $('<select></select')
					.attr('id', 'select_additional_' + $(div).attr('id').substring(11))
					.append('<option>More...</option>')
					.appendTo(div);
	var text;
	for (var i = 0; i < additional.length; i++) {
		if (typeof additional[i].display_name == 'undefined')
			text = additional[i].name;
		else
			text = additional[i].display_name;
		$('<option>' + text + '</option>')
			.attr('data', additional[i].name)
			.appendTo(select);
	}
	
	$(select).change( function() {
		add_option($(this));
	});
	
	if ($(select).children('option').length == 1)
	{
		$(select).hide();
	}	
}

function add_option(select) {
	if ($(select).prop('selectedIndex') == 0) return;
	$('[id=_input_' + $(select).find(":selected").attr('data') + '_div]').show();
	if ($(select).parent().attr('id') == "select_div_colours") {
		$('option[value=-1]').prop('selected', 'selected');
	}
	$(select).children('option:selected').remove();
	if ($(select).children('option').length == 1) 
		$(select).hide();
}

function createAutoGeneratedURL(form) {
	var fieldset = $('<fieldset id=\"url_generator\"></fieldset>').appendTo(form);
	
	var ul = $("<label>URL: copy to your address bar</label>").appendTo(fieldset);
	
	$('<div id=\"url\" style=\"padding:0.3em 0.1em\" ></div>')
		.append('<textarea rows=\"3\"  id=\"autoURL\"></textarea>')
		.appendTo(ul);
	
	ul = $("<label>Embed: copy to your html page</label>").appendTo(fieldset);
	
	$('<div id=\"iframe\" style=\"padding:0.3em 0.1em\" ></div>')
	.append('<textarea rows=\"3\"  id=\"autoIframe\"></textarea>')
	.appendTo(ul);
	
	ul = $("<label>Link: copy to your html page</label>").appendTo(fieldset);
	
	$('<div id=\"Link\" style=\"padding:0.3em 0.1em\" ></div>')
	.append('<textarea rows=\"3\"  id=\"autoLink\"></textarea>')
	.appendTo(ul);
	
	
	
//	$('#myTab a:first').tab('show');
}

function createSubmitButton(form) {
	var submit = document.createElement("button");
	submit.innerHTML = "Try it!";
	submit.id = "submitBtn";
	submit.type = 'button';
	form.appendChild(submit);
	submit.addEventListener('click', function() {
		setnewurl(form);
		generateURL();
		animation_status = -1;
		init(); 
		}, false);
	$(form).append("<br></br>");
}

function generateURL() {	
	var fullpage = "http://www.onezoom.org/"
					+ autoGenerator.name 
					+ ".htm?"
					+ window.location.hash.substring(1);
//	var iframe   = "file:///Users/kaizhong/onezoom/release/Release19%2022_12_2013/"
	var iframe   = "http://www.onezoom.org/"
					+ "embeded_"
					+ autoGenerator.name + ".htm?"
					+ window.location.hash.substring(1);
	
	$('#autoURL').val(fullpage);
	$('#autoLink').val("<a href=\"" + fullpage + '\"' + ">OneZoom</a>");
	$('#autoIframe').val(
			  "<iframe " + "width=\"640\" height=\"400\" "
//			+ "previous_overflow=\"\" "
//			+ "onmouseover=\"suppress_scroll(this)\" "
//			+ "onmouseout=\"enable_scroll(this)\""
			+ "src=\""
			+ iframe + '\"' + "></iframe>"
//			+ "<script>" 
//			+ "function suppress_scroll(x) {"
//			+ "x.setAttribute(\'previous_overflow\', document.body.style.overflow);"
//			+ "document.body.style.overflow = \"hidden\";"
//			+ "}"
//			+ "function enable_scroll(x) {"
//			+ "document.body.style.overflow = x.getAttribute(\'previous_overflow\');"
//			+ "}"
//			+ "</script>"
			);
	
}

function setnewurl(form) {
	var search = "";
	var name = "";
	for (var i = 0; i < form.length; i++) {
		if (form[i].id.indexOf("_input") == 0) {
			name = "";
			if ($(form[i]).is('[data_url]'))
				name += $(form[i]).attr('data_url');
			else
				name += form[i].name;
			
			if (form[i].type == "radio" && form[i].checked) {
				search += name + "=" + form[i].value + "&";
			} else if (form[i].type == "checkbox" && form[i].checked) {
				search += name + "=" + "1" + "&";
			} else if (form[i].type == "checkbox" && !form[i].checked) {
				search += name + "=" + "2" + "&";
			} else if (form[i].type == "text" && form[i].value != "") {
				search += name + "=" + form[i].value.split(" ").join("%20") + "&";
			} else if (form[i].tagName == "SELECT"){
				search += name + "=" + form[i].options[form[i].selectedIndex].value.split(" ").join("%20") + "&";
			} 
		}
	}
	var input_name = $('input[id=_input_name]');
	if($(input_name).val() != "") {
		search += "text=link%20to%20" + $(input_name).val().split(" ").join("%20") + "&";
	}
    search = search.replace("&colour=-1", "");
	window.location.hash = search.substring(0, search.length-1);
}

function createSection(form, section) {
	var text;
	if (typeof section.display_name == 'undefined')
		text = section.name;
	else
		text = section.display_name;
	
	var fieldset = $('<fieldset></fieldset>')
					.attr('id', 'select_fieldset')
					.append('<legend>' + text + '</legend>')
					.appendTo(form);
	
	var newDiv = $('<div></div>')
					.attr('id', 'select_div_' + section.name)
					.appendTo(fieldset);
	return newDiv;
}


function createComponent(div, component, flag) {
	var newDiv;
	if (component.type == "radio") {
		newDiv = createRadio(div, component, flag);
	} else if (component.type == "checkbox") {
		newDiv = createCheckbox(div, component, flag);
	} else if (component.type == "text") {
		newDiv = createTextField(div, component, flag);
	} else if (component.type == "select") {
		newDiv = createDropList(div, component, flag);
	} else if (component.type == 'color') {
		newDiv = createColorPicker(div, component, flag);
	} else if (component.type == 'combination') {
		newDiv = createCombination(div, component, flag);
	}
	if (flag) {
		var text;
		if (typeof component.display_name == 'undefined')
			text = component.name;
		else
			text = component.display_name;
		$("<button>-</button>")
		.attr('type', 'button')
		.attr('id', '_input_'+component.name + '_minus_button')
		.attr('data', component.name)
		.attr('option_val', text)
		.click(function(newDiv) {
			$(this).parent().hide();
			var select = $(this).parent().parent().find('[id^=select_additional]');
			$(select).show();
			$(select).append('<option data=\"' + $(this).attr('data') + '\">' + $(this).attr('option_val') + '</option>');
		})
		.appendTo(newDiv);	
	}
}

function addminusButton(div, component) {
	$("<button>-</button>")
		.attr('type', 'button')
		.attr('id', '_input_'+component.name + '_minus_button')
		.click(function() {
			addToAdditional(div, component);
			deleteFromVisible(div, component);
		})
		.insertBefore($(div).children('[id^=select_additional]'));	
}

function addToAdditional(div, component) {
	var section;
	for (var i = 0; i < selections.length; i++) {
		if (selections[i].name == $(div).attr('id').substring(11))
			section = selections[i];
	}

	if (section == undefined) return;
	section.additional.push(component);

	$("<option>" + component.name + "</option>")
		.attr("name", component.name)
		.appendTo($(div).children("[id^=select_additional]"));
	$(div).children("[id^=select_additional]").next('button').andSelf().show();
}

function deleteFromVisible(div, component) {
	var nameInId = "";
	var names = component.name.split(" ");
	if (names.length == 1) nameInId = names;
	else {
		for (var i = 0; i < names.length; i++) {
			nameInId += component.name.split(" ")[i];
			if (i != names.length - 1)
				nameInId += "\\ ";
		}
	}
	$(div).children('[id^=_input_' + nameInId + ']').remove();
}

function createCombination(div, component, flag) {
	var newDiv = $('<div id=\"_input_' + component.name + '_div\"></div>').appendTo(div);

	var fieldset = $('<fieldset><legend>' + component.name + '</legend></fieldset>')
		.appendTo(newDiv);
	
	var select = $('<select></select>')
	.attr('id', '_select_combination_' + component.name)
	.attr('name', component.name)
	.appendTo($(fieldset));
	
	var options = component.options;
	for (var i = 0; i < options.length; i++) {
		$('<option>' + options[i].name + '</option>')
		.appendTo(select);
	}
	createCombinationOption(component, fieldset, 0);
	
	$(select).change( function() {
		deleteCombinationOption(fieldset);
		createCombinationOption(component, fieldset, $(select).prop("selectedIndex"));
	});
}

function createCombinationOption(component, fieldset, index) {
	var options = component.options[index].options;
	for (var i = 0; i < options.length; i++) {
		createComponent(fieldset, options[i], false);
	}
}

function deleteCombinationOption(fieldset) {
	$(fieldset).children('[id^=_input]').remove();
}

function createColorPicker(div, component, flag) {
	var newDiv = $('<div id=\"_input_' + component.name + '_div\"></div>').appendTo(div);
	
	var colorPicker = $('<input></input>')
						.attr('id', '_input_' + component.name)
						.attr('type', 'text')
						.attr('name',component.name)
						.attr('data', component.change)
						.appendTo(newDiv);
	
	var text;
	if (typeof component.display_name == 'undefined')
		text = component.name;
	else
		text = component.display_name;
	
	$('<label>' + text + ' ' + '</label>')
    .attr('id', $(colorPicker).attr('id'))
	.attr('name', component.name)
	.appendTo(newDiv);
	
	$(colorPicker).spectrum({
		color:component.original,
		move: function(color) {
			$(this).spectrum("set", color);
			var rgb = hexToRgb(color.toHexString());
			var rgbname = "rgb(" + rgb.r + "," + rgb.g + "," + rgb.b + ")";
			$(this).val(rgbname);
			FunctionMap($(this).attr('data'), rgbname);
		},
	});
	
	$(colorPicker).next('[class^=sp-replace]')
			.attr('id', '_input_' + component.name);
	
	var button = $('<button>Reset</button>')
					.attr('id', '_input_' + component.name + "_reset_btn")
					.attr('type', 'button')
					.attr('data', component.change)
					.val(component.original)
					.insertAfter($(colorPicker));
	
	$(button).click(function() {
		$(colorPicker).val($(this).val());
		$(colorPicker).spectrum({
			color:component.original,
			move: function(color) {
				$(this).spectrum("set", color);
				var rgb = hexToRgb(color.toHexString());
				var rgbname = "rgb(" + rgb.r + "," + rgb.g + "," + rgb.b + ")";
				$(this).val(rgbname);
				FunctionMap($(this).attr('data'), rgbname);
			},
		});
		$(colorPicker).next('[class^=sp-replace]')
		.attr('id', '_input_' + component.name);
		FunctionMap($(this).attr('data'), $(this).val());
	});
	
	$(colorPicker).next('[class^=sp-repla]')
	.attr('id', '_input_' + component.name);
	
	if (component.urlname != undefined)
		colorPicker.attr('data_url', component.urlname);

	return newDiv;
}


function createRadio(div, component, flag) {
	var newDiv = $('<div id=\"_input_' + component.name + '_div\"></div>').appendTo(div);
	var options = component.options;
	for (var i = 0; i < options.length; i++) {
		var label = $('<label>' + options[i].name + '</label>')
						.attr('id', $(radio).attr('id'))
						.attr('class', 'radio-inline ')
						.appendTo(newDiv);
		
		var radio = $('<input></input>')
					.attr('id', '_input_'  + component.name)
					.attr('type', 'radio')
					.val(options[i].value)
					.attr('name', component.name)
					.attr('data', options[i].click);
					
		$(label).prepend(radio);

		if (component.urlname != undefined)
			radio.attr('data_url', component.urlname);
		
		if (options[i].checked != null && options[i].checked == "true")
			$(radio).prop('checked', true);
		
		if (options[i].click != null) {
			$(radio).click( function() {
				FunctionMap($(this).attr('data'), $(this).val());
			});
		}
	}
	return newDiv;
}

function createCheckbox(div, component, flag) {
	var newDiv = $('<div id=\"_input_' + component.name + '_div\"></div>').appendTo(div);
	var options = component.options;
	for (var i = 0; i < options.length; i++) {
		var checkbox = $('<input></input>')
						.attr('type', 'checkbox')
						.attr('id', '_input_'+ component.name )
						.attr('name', component.name)
						.attr('data', options[i].click)
						.appendTo(newDiv);

		if (component.urlname != undefined)
			checkbox.attr('data_url', component.urlname);
		
		if (options[i].checked != null && options[i].checked == "true")
			$(checkbox).prop('checked', true);

		$(checkbox).click( function() {
			FunctionMap($(this).attr('data'), $(this).val());
		});
		
		$('<label>' + options[i].name + " " + '</label>')
			.attr('id', $(checkbox).attr('id'))
			.insertAfter(checkbox);
	}
	return newDiv;
}

function createTextField(div, component, flag) {
	var newDiv = $('<div id=\"_input_' + component.name + '_div\"></div>').appendTo(div);
	var text = $('<input></input>')
				.attr('id', '_input_' + component.name)
				.attr('type', 'text')
				.attr('name', component.name)
				.appendTo(newDiv);
	
	if (component.urlname != undefined)
		text.attr('data_url', component.urlname);
	
	var display_text;
	if (typeof component.display_name == 'undefined')
		display_text = component.name;
	else
		display_text = component.display_name;

	$('<label>' + display_text + ' ' + '</label>')
    .attr('id', $(text).attr('id'))
	.attr('name', component.name)
	.insertAfter(text);
	return newDiv;
}

function createDropList(div, component, flag) {
	var newDiv = $('<div id=\"_input_' + component.name + '_div\"></div>').appendTo(div);
	
	var select = $('<select></select>')
				.attr('id', '_input_' + component.name)
				.attr('name', component.name)
				.attr('data', component.change)
				.appendTo(newDiv);
	
	if (component.urlname != undefined)
		select.attr('data_url', component.urlname);
	
	var options = component.options;
	for (var i = 0; i < options.length; i++) {
		var option = $('<option>' + options[i].name + '</option>')
			.val(options[i].value)
			.appendTo(select);
		if (typeof options[i].disable != 'undefined' && options[i].disable == 'true') {
			$(option).prop('disabled', true);
		}
	}	
	$(select).change( function() {
				FunctionMap($(this).attr('data'), $(this).val());
			});
	
	var text;
	if (typeof component.display_name == 'undefined')
		text = component.name;
	else
		text = component.display_name;
	
	$('<label>' + text + ' ' + '</label>')
    .attr('id', $(select).attr('id'))
    .attr('name', component.name)
	.insertAfter(select);
	return newDiv;
}

function reloadIframe(id) {
	var init_type = document.getElementById("init_type").value;
	var url = document.getElementById(id).src;
	url = url + "init=" + init_type;
	document.getElementById(id).src = url;
	document.getElementById(id).src = document.getElementById(id).src
}

function addNewFeature() {
	var select = document.getElementById("new_feature");
	var selIndex = select.selectedIndex;
	var selValue = select.options[selIndex].innerHTML;	
	addNewRow(selValue);
	select.remove(selIndex);
}

function addNewRow(selValue) {
	var row = document.createElement("div");
	row.className = "row";
	
	var column = document.createElement("div")
	column.className = "large-12 columns";
	
	var label = document.createElement("label");
	label.innerHTML = selValue;
	
	var select = document.createElement("select");
	
	row.appendChild(column);
	column.appendChild(label)
	column.appendChild(select);

	document.getElementById("form").insertBefore(row, document.getElementById("tryit"));
}